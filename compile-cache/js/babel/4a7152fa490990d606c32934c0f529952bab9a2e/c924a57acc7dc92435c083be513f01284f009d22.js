var nodedir = require("node-dir");

module.exports.bufferEE = function (emiter, event, onListener, period, after) {
    emiter.on(event, onListener);

    var flush = function flush() {
        emiter.removeListener(event, onListener);
        after();
    };
    setTimeout(flush, period);

    return {
        flush: (function (_flush) {
            var _flushWrapper = function flush() {
                return _flush.apply(this, arguments);
            };

            _flushWrapper.toString = function () {
                return _flush.toString();
            };

            return _flushWrapper;
        })(function () {
            clearTimeout(flush(), period);
            flush();
        })
    };
};

module.exports.findDefinition = function (dirs, fileName, definitionRegExp, callback) {
    lookInDirs(dirs);
    function lookInDirs(dirs) {
        if (!dirs.length) {
            callback({ err: null, result: null });
            return;
        }
        nodedir.readFiles(dirs[0], { exclude: /^\./, match: new RegExp(fileName) }, function (err, content, next) {
            if (err) {
                console.log("error");
                callback({ err: err });
                lookInDirs(dirs.slice(1));
            } else {
                var result = content.match(definitionRegExp);
                if (result) callback({ result: result, err: null });else next();
            }
        }, function (err, files) {
            if (err) callback({ err: err });
            lookInDirs(dirs.slice(1));
        });
    }
};

module.exports.$$$ = function () {
    throw new Error("Not implemented yet");
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lyYWFzdGEvLmF0b20vcGFja2FnZXMvYXV0b2NvbXBsZXRlLWVybGFuZy9saWIvc2VydmVyL2hlbHBlcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBOztBQUVqQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxVQUFTLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUM7QUFDeEUsVUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7O0FBRTdCLFFBQUksS0FBSyxHQUFHLGlCQUFVO0FBQ2xCLGNBQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3pDLGFBQUssRUFBRSxDQUFBO0tBQ1YsQ0FBQztBQUNGLGNBQVUsQ0FBQyxLQUFLLEVBQUcsTUFBTSxDQUFDLENBQUM7O0FBRTNCLFdBQU87QUFDSCxhQUFLOzs7Ozs7Ozs7O1dBQUcsWUFBVTtBQUNkLHdCQUFZLENBQUMsS0FBSyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDOUIsaUJBQUssRUFBRSxDQUFBO1NBQ1YsQ0FBQTtLQUNKLENBQUE7Q0FDSixDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLFVBQVMsSUFBSSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUU7QUFDakYsY0FBVSxDQUFDLElBQUksQ0FBRSxDQUFDO0FBQ2xCLGFBQVMsVUFBVSxDQUFDLElBQUksRUFBRTtBQUN0QixZQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQztBQUNaLG9CQUFRLENBQUMsRUFBQyxHQUFHLEVBQUcsSUFBSSxFQUFFLE1BQU0sRUFBRyxJQUFJLEVBQUMsQ0FBQyxDQUFDO0FBQ3RDLG1CQUFPO1NBQ1Y7QUFDRCxlQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFDLEVBQUUsVUFBVSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtBQUNyRyxnQkFBSSxHQUFHLEVBQUU7QUFDTCx1QkFBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNwQix3QkFBUSxDQUFDLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7QUFDckIsMEJBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDN0IsTUFBTTtBQUNILG9CQUFJLE1BQU0sR0FBSSxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDOUMsb0JBQUcsTUFBTSxFQUFDLFFBQVEsQ0FBQyxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsS0FDM0MsSUFBSSxFQUFFLENBQUE7YUFDZDtTQUNKLEVBQUUsVUFBUyxHQUFHLEVBQUUsS0FBSyxFQUFDO0FBQ25CLGdCQUFHLEdBQUcsRUFBRSxRQUFRLENBQUMsRUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQTtBQUM1QixzQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QixDQUFDLENBQUM7S0FDTjtDQUNKLENBQUE7O0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsWUFBVTtBQUMzQixVQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7Q0FDMUMsQ0FBQyIsImZpbGUiOiIvaG9tZS9pcmFhc3RhLy5hdG9tL3BhY2thZ2VzL2F1dG9jb21wbGV0ZS1lcmxhbmcvbGliL3NlcnZlci9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vZGVkaXIgPSByZXF1aXJlKFwibm9kZS1kaXJcIilcblxubW9kdWxlLmV4cG9ydHMuYnVmZmVyRUUgPSBmdW5jdGlvbihlbWl0ZXIsIGV2ZW50ICxvbkxpc3RlbmVyLCBwZXJpb2QsIGFmdGVyKXtcbiAgICBlbWl0ZXIub24oZXZlbnQsIG9uTGlzdGVuZXIpO1xuXG4gICAgdmFyIGZsdXNoID0gZnVuY3Rpb24oKXtcbiAgICAgICAgZW1pdGVyLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBvbkxpc3RlbmVyKTtcbiAgICAgICAgYWZ0ZXIoKVxuICAgIH07XG4gICAgc2V0VGltZW91dChmbHVzaCAsIHBlcmlvZCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmbHVzaCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZmx1c2goKSwgcGVyaW9kKTtcbiAgICAgICAgICAgIGZsdXNoKClcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmZpbmREZWZpbml0aW9uID0gZnVuY3Rpb24oZGlycywgZmlsZU5hbWUsIGRlZmluaXRpb25SZWdFeHAsIGNhbGxiYWNrKSB7XG4gICAgbG9va0luRGlycyhkaXJzICk7XG4gICAgZnVuY3Rpb24gbG9va0luRGlycyhkaXJzKSB7XG4gICAgICAgIGlmKCFkaXJzLmxlbmd0aCl7XG4gICAgICAgICAgICBjYWxsYmFjayh7ZXJyIDogbnVsbCwgcmVzdWx0IDogbnVsbH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVkaXIucmVhZEZpbGVzKGRpcnNbMF0sIHtleGNsdWRlIDogL15cXC4vLCBtYXRjaDogbmV3IFJlZ0V4cChmaWxlTmFtZSl9LCBmdW5jdGlvbiAoZXJyLCBjb250ZW50LCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvclwiKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtlcnI6IGVycn0pO1xuICAgICAgICAgICAgICAgIGxvb2tJbkRpcnMoZGlycy5zbGljZSgxKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgID0gY29udGVudC5tYXRjaChkZWZpbml0aW9uUmVnRXhwKTtcbiAgICAgICAgICAgICAgICBpZihyZXN1bHQpY2FsbGJhY2soe3Jlc3VsdDogcmVzdWx0LCBlcnI6IG51bGx9KTtcbiAgICAgICAgICAgICAgICBlbHNlIG5leHQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbihlcnIsIGZpbGVzKXtcbiAgICAgICAgICAgIGlmKGVycikgY2FsbGJhY2soe2VycjogZXJyfSlcbiAgICAgICAgICAgIGxvb2tJbkRpcnMoZGlycy5zbGljZSgxKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuJCQkID0gZnVuY3Rpb24oKXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQgeWV0XCIpO1xufTsiXX0=