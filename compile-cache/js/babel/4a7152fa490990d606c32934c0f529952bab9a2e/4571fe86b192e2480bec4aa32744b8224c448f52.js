var assert = require("assert");

// testing reading data from stdin, since that's a crucial feature
if (process.stdin.setRawMode) {
  process.stdin.setRawMode(true);
} else {
  tty.setRawMode(true);
}
process.stdin.resume();
process.stdin.setEncoding("utf8");

// the child script expects 1 data event, with the text "☃"
var dataCount = 0;
process.stdin.on("data", function (data) {
  dataCount++;
  assert.equal(data, "☃");

  // done!
  process.stdin.pause();
  clearTimeout(timeout);
});

var timeout = setTimeout(function () {
  console.error("TIMEOUT!");
  process.exit(7);
}, 5000);

process.on("exit", function (code) {
  if (code === 7) return; // timeout
  assert.equal(dataCount, 1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lyYWFzdGEvLmF0b20vcGFja2FnZXMvYXV0b2NvbXBsZXRlLWVybGFuZy9saWIvc2VydmVyL3B0eS5qcy90ZXN0L2NoaWxkcmVuL3N0ZGluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O0FBRy9CLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUU7QUFDNUIsU0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDaEMsTUFBTTtBQUNMLEtBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDdEI7QUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDOzs7QUFHbEMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFVLElBQUksRUFBRTtBQUN2QyxXQUFTLEVBQUUsQ0FBQztBQUNaLFFBQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7QUFHeEIsU0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN0QixjQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDdkIsQ0FBQyxDQUFDOztBQUVILElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxZQUFZO0FBQ25DLFNBQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDMUIsU0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqQixFQUFFLElBQUksQ0FBQyxDQUFDOztBQUVULE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQVUsSUFBSSxFQUFFO0FBQ2pDLE1BQUksSUFBSSxLQUFLLENBQUMsRUFBRSxPQUFPO0FBQ3ZCLFFBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzVCLENBQUMsQ0FBQyIsImZpbGUiOiIvaG9tZS9pcmFhc3RhLy5hdG9tL3BhY2thZ2VzL2F1dG9jb21wbGV0ZS1lcmxhbmcvbGliL3NlcnZlci9wdHkuanMvdGVzdC9jaGlsZHJlbi9zdGRpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxuLy8gdGVzdGluZyByZWFkaW5nIGRhdGEgZnJvbSBzdGRpbiwgc2luY2UgdGhhdCdzIGEgY3J1Y2lhbCBmZWF0dXJlXG5pZiAocHJvY2Vzcy5zdGRpbi5zZXRSYXdNb2RlKSB7XG4gIHByb2Nlc3Muc3RkaW4uc2V0UmF3TW9kZSh0cnVlKTtcbn0gZWxzZSB7XG4gIHR0eS5zZXRSYXdNb2RlKHRydWUpO1xufVxucHJvY2Vzcy5zdGRpbi5yZXN1bWUoKTtcbnByb2Nlc3Muc3RkaW4uc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcblxuLy8gdGhlIGNoaWxkIHNjcmlwdCBleHBlY3RzIDEgZGF0YSBldmVudCwgd2l0aCB0aGUgdGV4dCBcIuKYg1wiXG52YXIgZGF0YUNvdW50ID0gMDtcbnByb2Nlc3Muc3RkaW4ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICBkYXRhQ291bnQrKztcbiAgYXNzZXJ0LmVxdWFsKGRhdGEsICfimIMnKTtcblxuICAvLyBkb25lIVxuICBwcm9jZXNzLnN0ZGluLnBhdXNlKCk7XG4gIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn0pO1xuXG52YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmVycm9yKCdUSU1FT1VUIScpO1xuICBwcm9jZXNzLmV4aXQoNyk7XG59LCA1MDAwKTtcblxucHJvY2Vzcy5vbignZXhpdCcsIGZ1bmN0aW9uIChjb2RlKSB7XG4gIGlmIChjb2RlID09PSA3KSByZXR1cm47IC8vIHRpbWVvdXRcbiAgYXNzZXJ0LmVxdWFsKGRhdGFDb3VudCwgMSk7XG59KTtcbiJdfQ==