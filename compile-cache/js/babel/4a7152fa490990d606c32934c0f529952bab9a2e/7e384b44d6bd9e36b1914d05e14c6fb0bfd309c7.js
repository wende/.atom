var url = require("url");
var TermView = require("./lib/TermView");

module.exports = {
  termViews: [],
  configDefaults: {
    autoRunCommand: null
  },
  activate: function activate(state) {
    this.state = state;
    var self = this;
    atom.workspaceView.command("term:open", self.openTerm.bind(self));
    ["up", "right", "down", "left"].forEach(function (direction) {
      atom.workspaceView.command("term:open-split-" + direction, self.splitTerm.bind(self, direction));
    });
    if (state.termViews) {}
  },
  createTermView: function createTermView() {
    var opts = {
      runCommand: atom.config.get("term.autoRunCommand")
    };
    var termView = new TermView(opts);
    termView.on("remove", this.handleRemoveTerm.bind(this));
    this.termViews.push(termView);
    return termView;
  },
  splitTerm: function splitTerm(direction) {
    var termView = this.createTermView();
    direction = capitalize(direction);
    atom.workspace.getActivePane()["split" + direction]({
      items: [termView]
    });
  },
  openTerm: function openTerm() {
    var termView = new TermView();
    activePane = atom.workspace.getActivePane();
    activePane.addItem(termView);
    activePane.activateNextItem();
  },
  handleRemoveTerm: function handleRemoveTerm(termView) {
    var termViews = this.termViews;
    termViews.splice(termViews.indexOf(termView), 1); // remove
  },
  deactivate: function deactivate() {
    termViews.forEach(function (view) {
      view.deactivate();
    });
  },
  serialize: function serialize() {
    var termViewsState = this.termViews.map(function () {
      return termViews.serialize();
    });
    return {
      termViews: termViewsState
    };
  }
};

function capitalize(str) {
  return str[0].toUpperCase() + str.slice(1).toLowerCase();
}

// TODO: restore
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lyYWFzdGEvLmF0b20vcGFja2FnZXMvdGVybS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7O0FBRXpDLE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDYixXQUFTLEVBQUUsRUFBRTtBQUNiLGdCQUFjLEVBQUU7QUFDZCxrQkFBYyxFQUFFLElBQUk7R0FDckI7QUFDRCxVQUFRLEVBQUUsa0JBQVUsS0FBSyxFQUFFO0FBQ3pCLFFBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ25CLFFBQUksSUFBSSxHQUFHLElBQUksQ0FBQztBQUNoQixRQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNsRSxLQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLFNBQVMsRUFBRTtBQUMzRCxVQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsR0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDaEcsQ0FBQyxDQUFDO0FBQ0gsUUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFLEVBRXBCO0dBQ0Y7QUFDRCxnQkFBYyxFQUFFLDBCQUFZO0FBQzFCLFFBQUksSUFBSSxHQUFHO0FBQ1QsZ0JBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQztLQUNuRCxDQUFDO0FBQ0YsUUFBSSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsWUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hELFFBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlCLFdBQU8sUUFBUSxDQUFDO0dBQ2pCO0FBQ0QsV0FBUyxFQUFFLG1CQUFVLFNBQVMsRUFBRTtBQUM5QixRQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDckMsYUFBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNsQyxRQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxDQUFDLE9BQU8sR0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRCxXQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7S0FDbEIsQ0FBQyxDQUFDO0dBQ0o7QUFDRCxVQUFRLEVBQUUsb0JBQVc7QUFDbkIsUUFBSSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUM5QixjQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUM1QyxjQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLGNBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0dBQy9CO0FBQ0Qsa0JBQWdCLEVBQUUsMEJBQVUsUUFBUSxFQUFFO0FBQ3BDLFFBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDL0IsYUFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0dBQ2xEO0FBQ0QsWUFBVSxFQUFFLHNCQUFZO0FBQ3RCLGFBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLEVBQUU7QUFDaEMsVUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ25CLENBQUMsQ0FBQztHQUNKO0FBQ0QsV0FBUyxFQUFFLHFCQUFZO0FBQ3JCLFFBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVk7QUFDbEQsYUFBTyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7S0FDOUIsQ0FBQyxDQUFDO0FBQ0gsV0FBTztBQUNMLGVBQVMsRUFBRSxjQUFjO0tBQzFCLENBQUM7R0FDSDtDQUNKLENBQUM7O0FBRUYsU0FBUyxVQUFVLENBQUUsR0FBRyxFQUFFO0FBQ3hCLFNBQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7Q0FDMUQiLCJmaWxlIjoiL2hvbWUvaXJhYXN0YS8uYXRvbS9wYWNrYWdlcy90ZXJtL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpO1xudmFyIFRlcm1WaWV3ID0gcmVxdWlyZSgnLi9saWIvVGVybVZpZXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdGVybVZpZXdzOiBbXSxcbiAgICBjb25maWdEZWZhdWx0czoge1xuICAgICAgYXV0b1J1bkNvbW1hbmQ6IG51bGxcbiAgICB9LFxuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIGF0b20ud29ya3NwYWNlVmlldy5jb21tYW5kKCd0ZXJtOm9wZW4nLCBzZWxmLm9wZW5UZXJtLmJpbmQoc2VsZikpO1xuICAgICAgWyd1cCcsICdyaWdodCcsICdkb3duJywgJ2xlZnQnXS5mb3JFYWNoKGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgYXRvbS53b3Jrc3BhY2VWaWV3LmNvbW1hbmQoJ3Rlcm06b3Blbi1zcGxpdC0nK2RpcmVjdGlvbiwgc2VsZi5zcGxpdFRlcm0uYmluZChzZWxmLCBkaXJlY3Rpb24pKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHN0YXRlLnRlcm1WaWV3cykge1xuICAgICAgICAvLyBUT0RPOiByZXN0b3JlXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVUZXJtVmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG9wdHMgPSB7XG4gICAgICAgIHJ1bkNvbW1hbmQ6IGF0b20uY29uZmlnLmdldCgndGVybS5hdXRvUnVuQ29tbWFuZCcpXG4gICAgICB9O1xuICAgICAgdmFyIHRlcm1WaWV3ID0gbmV3IFRlcm1WaWV3KG9wdHMpO1xuICAgICAgdGVybVZpZXcub24oJ3JlbW92ZScsIHRoaXMuaGFuZGxlUmVtb3ZlVGVybS5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMudGVybVZpZXdzLnB1c2godGVybVZpZXcpO1xuICAgICAgcmV0dXJuIHRlcm1WaWV3O1xuICAgIH0sXG4gICAgc3BsaXRUZXJtOiBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgICB2YXIgdGVybVZpZXcgPSB0aGlzLmNyZWF0ZVRlcm1WaWV3KCk7XG4gICAgICBkaXJlY3Rpb24gPSBjYXBpdGFsaXplKGRpcmVjdGlvbik7XG4gICAgICBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lKClbJ3NwbGl0JytkaXJlY3Rpb25dKHtcbiAgICAgICAgaXRlbXM6IFt0ZXJtVmlld11cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb3BlblRlcm06IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRlcm1WaWV3ID0gbmV3IFRlcm1WaWV3KCk7XG4gICAgICBhY3RpdmVQYW5lID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZSgpO1xuICAgICAgYWN0aXZlUGFuZS5hZGRJdGVtKHRlcm1WaWV3KTtcbiAgICAgIGFjdGl2ZVBhbmUuYWN0aXZhdGVOZXh0SXRlbSgpO1xuICAgIH0sXG4gICAgaGFuZGxlUmVtb3ZlVGVybTogZnVuY3Rpb24gKHRlcm1WaWV3KSB7XG4gICAgICB2YXIgdGVybVZpZXdzID0gdGhpcy50ZXJtVmlld3M7XG4gICAgICB0ZXJtVmlld3Muc3BsaWNlKHRlcm1WaWV3cy5pbmRleE9mKHRlcm1WaWV3KSwgMSk7IC8vIHJlbW92ZVxuICAgIH0sXG4gICAgZGVhY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGVybVZpZXdzLmZvckVhY2goZnVuY3Rpb24gKHZpZXcpIHtcbiAgICAgICAgdmlldy5kZWFjdGl2YXRlKCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRlcm1WaWV3c1N0YXRlID0gdGhpcy50ZXJtVmlld3MubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRlcm1WaWV3cy5zZXJpYWxpemUoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGVybVZpZXdzOiB0ZXJtVmlld3NTdGF0ZVxuICAgICAgfTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplIChzdHIpIHtcbiAgcmV0dXJuIHN0clswXS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XG59XG4iXX0=