(function() {
  var DO, DOEND, END, FN, Point, Range, decorations, highlightRange, _ref;

  DO = "do";

  END = "end";

  FN = "fn";

  DOEND = /(do|end|fn)/g;

  _ref = require("atom"), Range = _ref.Range, Point = _ref.Point;

  decorations = [];

  highlightRange = function(editor, r) {
    var marker;
    marker = editor.markBufferRange(r);
    return decorations.push(editor.decorateMarker(marker, {
      type: 'highlight',
      "class": 'selection'
    }));
  };

  module.exports.handleMatch = function(editor, e) {
    var counter, fromBeginning, lastLineNo, toEnd, word, x, y, _ref1;
    if (!atom.config.get("autocomplete-elixir.matchDoEnd")) {
      return;
    }
    decorations.map(function(a) {
      return a.destroy();
    });
    lastLineNo = editor.buffer.lines.length - 1;
    _ref1 = e.cursor.getBufferPosition().toArray(), x = _ref1[0], y = _ref1[1];
    fromBeginning = new Range([0, 0], [x, y - 1]);
    toEnd = new Range([x, y + 1], [lastLineNo, 0]);
    word = editor.getWordUnderCursor();
    counter = 0;
    if (word === DO) {
      highlightRange(editor, e.cursor.getCurrentWordBufferRange());
      editor.scanInBufferRange(DOEND, toEnd, function(_arg) {
        var m, r, stop;
        r = _arg.range, m = _arg.matchText, stop = _arg.stop;
        if (m === DO || m === FN) {
          counter++;
        }
        if (m === END && counter) {
          return counter--;
        } else if (!counter) {
          highlightRange(editor, r);
          return stop();
        }
      });
    }
    if (word === END) {
      highlightRange(editor, e.cursor.getCurrentWordBufferRange());
      return editor.backwardsScanInBufferRange(DOEND, fromBeginning, function(_arg) {
        var m, r, stop;
        r = _arg.range, m = _arg.matchText, stop = _arg.stop;
        if (m === END) {
          counter++;
        }
        if ((m === DO || m === FN) && counter) {
          return counter--;
        } else if (!counter) {
          highlightRange(editor, r);
          return stop();
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvaXJhYXN0YS8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtZWxpeGlyL2xpYi9hbGNoZW1pZGUvZG9lbmRtYXRjaGVyLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxtRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxJQUFMLENBQUE7O0FBQUEsRUFDQSxHQUFBLEdBQU0sS0FETixDQUFBOztBQUFBLEVBRUEsRUFBQSxHQUFLLElBRkwsQ0FBQTs7QUFBQSxFQUdBLEtBQUEsR0FBUSxjQUhSLENBQUE7O0FBQUEsRUFJQSxPQUFpQixPQUFBLENBQVEsTUFBUixDQUFqQixFQUFDLGFBQUEsS0FBRCxFQUFRLGFBQUEsS0FKUixDQUFBOztBQUFBLEVBS0EsV0FBQSxHQUFjLEVBTGQsQ0FBQTs7QUFBQSxFQVFBLGNBQUEsR0FBaUIsU0FBQyxNQUFELEVBQVMsQ0FBVCxHQUFBO0FBQ2YsUUFBQSxNQUFBO0FBQUEsSUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLGVBQVAsQ0FBdUIsQ0FBdkIsQ0FBVCxDQUFBO1dBQ0EsV0FBVyxDQUFDLElBQVosQ0FBaUIsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsTUFBdEIsRUFBOEI7QUFBQSxNQUFDLElBQUEsRUFBTSxXQUFQO0FBQUEsTUFBb0IsT0FBQSxFQUFPLFdBQTNCO0tBQTlCLENBQWpCLEVBRmU7RUFBQSxDQVJqQixDQUFBOztBQUFBLEVBWUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFmLEdBQTZCLFNBQUMsTUFBRCxFQUFTLENBQVQsR0FBQTtBQUMzQixRQUFBLDREQUFBO0FBQUEsSUFBQSxJQUFHLENBQUEsSUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLGdDQUFoQixDQUFQO0FBQThELFlBQUEsQ0FBOUQ7S0FBQTtBQUFBLElBQ0EsV0FBVyxDQUFDLEdBQVosQ0FB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

//# sourceURL=/home/iraasta/.atom/packages/autocomplete-elixir/lib/alchemide/doendmatcher.coffee
