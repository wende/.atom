(function() {
  var EditorState, Mark;

  EditorState = require('./editor-state');

  Mark = require('./../lib/mark');

  describe("Mark", function() {
    beforeEach(function() {
      return waitsForPromise((function(_this) {
        return function() {
          return atom.workspace.open().then(function(editor) {
            _this.editor = editor;
            return _this.cursor = _this.editor.getLastCursor();
          });
        };
      })(this));
    });
    describe(".for", function() {
      it("returns the mark for the given cursor", function() {
        var cursor0, cursor1, mark0, mark1, _ref;
        EditorState.set(this.editor, "a[0]b[1]c");
        _ref = this.editor.getCursors(), cursor0 = _ref[0], cursor1 = _ref[1];
        mark0 = Mark["for"](cursor0);
        mark1 = Mark["for"](cursor1);
        expect(mark0.cursor).toBe(cursor0);
        return expect(mark1.cursor).toBe(cursor1);
      });
      return it("returns the same Mark each time for a cursor", function() {
        var mark;
        mark = Mark["for"](this.cursor);
        return expect(Mark["for"](this.cursor)).toBe(mark);
      });
    });
    describe("constructor", function() {
      it("sets the mark to where the cursor is", function() {
        var column, mark, row, _ref;
        EditorState.set(this.editor, ".[0]");
        mark = Mark["for"](this.cursor);
        _ref = mark.getBufferPosition(), row = _ref.row, column = _ref.column;
        return expect([row, column]).toEqual([0, 1]);
      });
      return it("deactivates and destroys the marker when the cursor is destroyed", function() {
        var cursor0, cursor1, mark1, numMarkers, _ref;
        EditorState.set(this.editor, "[0].");
        _ref = this.editor.getCursors(), cursor0 = _ref[0], cursor1 = _ref[1];
        numMarkers = this.editor.getMarkerCount();
        cursor1 = this.editor.addCursorAtBufferPosition([0, 1]);
        mark1 = Mark["for"](cursor1);
        expect(this.editor.getMarkerCount()).toBeGreaterThan(numMarkers);
        cursor1.destroy();
        expect(mark1.isActive()).toBe(false);
        return expect(this.editor.getMarkerCount()).toEqual(numMarkers);
      });
    });
    describe("set", function() {
      it("sets the mark position to where the cursor is", function() {
        var mark;
        EditorState.set(this.editor, "[0].");
        mark = Mark["for"](this.cursor);
        this.cursor.setBufferPosition([0, 1]);
        expect(mark.getBufferPosition().column).toEqual(0);
        mark.set();
        return expect(mark.getBufferPosition().column).toEqual(1);
      });
      it("clears the active selection", function() {
        var mark;
        EditorState.set(this.editor, "a(0)b[0]c");
        mark = Mark["for"](this.cursor);
        expect(this.cursor.selection.getText()).toEqual('b');
        mark.set();
        return expect(this.cursor.selection.getText()).toEqual('');
      });
      return it("returns the mark so we can conveniently chain an activate() call", function() {
        var mark;
        mark = Mark["for"](this.cursor);
        return expect(mark.set()).toBe(mark);
      });
    });
    describe("activate", function() {
      it("activates the mark", function() {
        var mark;
        mark = Mark["for"](this.cursor);
        mark.activate();
        return expect(mark.isActive()).toBe(true);
      });
      it("causes cursor movements to extend the selection", function() {
        EditorState.set(this.editor, ".[0]..");
        Mark["for"](this.cursor).activate();
        this.cursor.setBufferPosition([0, 2]);
        return expect(EditorState.get(this.editor)).toEqual(".(0).[0].");
      });
      it("causes buffer edits to deactivate the mark", function() {
        var mark;
        EditorState.set(this.editor, ".[0]..");
        mark = Mark["for"](this.cursor);
        mark.set().activate();
        this.cursor.setBufferPosition([0, 2]);
        expect(EditorState.get(this.editor)).toEqual(".(0).[0].");
        this.editor.setTextInBufferRange([[0, 0], [0, 1]], 'x');
        expect(mark.isActive()).toBe(false);
        expect(EditorState.get(this.editor)).toEqual("x.[0].");
        return expect(this.cursor.selection.isEmpty()).toBe(true);
      });
      return it("doesn't deactive the mark if changes are indents", function() {
        var mark;
        EditorState.set(this.editor, ".[0]..");
        mark = Mark["for"](this.cursor);
        mark.set().activate();
        this.cursor.setBufferPosition([0, 2]);
        expect(EditorState.get(this.editor)).toEqual(".(0).[0].");
        this.editor.indentSelectedRows();
        expect(mark.isActive()).toBe(true);
        expect(EditorState.get(this.editor)).toEqual("  .(0).[0].");
        return expect(this.cursor.selection.isEmpty()).toBe(false);
      });
    });
    describe("deactivate", function() {
      it("deactivates the mark", function() {
        var mark;
        mark = Mark["for"](this.cursor);
        mark.activate();
        expect(mark.isActive()).toBe(true);
        mark.deactivate();
        return expect(mark.isActive()).toBe(false);
      });
      return it("clears the selection", function() {
        var mark;
        EditorState.set(this.editor, "[0].");
        mark = Mark["for"](this.cursor);
        mark.activate();
        this.cursor.setBufferPosition([0, 1]);
        expect(this.cursor.selection.isEmpty()).toBe(false);
        mark.deactivate();
        return expect(this.cursor.selection.isEmpty()).toBe(true);
      });
    });
    return describe("exchange", function() {
      it("exchanges the cursor and mark", function() {
        var mark, point;
        EditorState.set(this.editor, "[0].");
        mark = Mark["for"](this.cursor);
        this.cursor.setBufferPosition([0, 1]);
        mark.exchange();
        point = mark.getBufferPosition();
        expect([point.row, point.column]).toEqual([0, 1]);
        point = this.cursor.getBufferPosition();
        return expect([point.row, point.column]).toEqual([0, 0]);
      });
      it("activates the mark & selection if it wasn't active", function() {
        var mark;
        EditorState.set(this.editor, "[0].");
        mark = Mark["for"](this.cursor);
        this.cursor.setBufferPosition([0, 1]);
        expect(EditorState.get(this.editor)).toEqual(".[0]");
        expect(mark.isActive()).toBe(false);
        mark.exchange();
        expect(EditorState.get(this.editor)).toEqual("[0].(0)");
        return expect(mark.isActive()).toBe(true);
      });
      return it("leaves the mark & selection active if it already was", function() {
        var mark;
        EditorState.set(this.editor, "[0].");
        mark = Mark["for"](this.cursor);
        mark.activate();
        this.cursor.setBufferPosition([0, 1]);
        expect(EditorState.get(this.editor)).toEqual("(0).[0]");
        expect(mark.isActive()).toBe(true);
        mark.exchange();
        expect(EditorState.get(this.editor)).toEqual("[0].(0)");
        return expect(mark.isActive()).toBe(true);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/iraasta/.atom/packages/atomic-emacs/spec/mark-spec.coffee
