(function() {
  var Process, atom, autocomplete, fs, inp, out, path, projectPaths, spawn, waitTillEnd;

  autocomplete = "autocompleter/autocomplete.exs";

  atom = require("atom");

  Process = atom.BufferedProcess;

  spawn = require('child_process').spawn;

  path = require('path');

  fs = require('fs');

  out = null;

  inp = null;

  projectPaths = null;

  exports.init = function(pP) {
    var ac, array, command, e, exit, p, setting, stderr;
    projectPaths = pP;
    p = path.join(__dirname, autocomplete);
    array = projectPaths;
    stderr = function(e) {
      return atom.notifications.addError("Woops. Something went bananas \n Error: " + e);
    };
    exit = function(e) {
      console.log("CLOSED " + e);
      return exports.init(projectPaths);
    };
    array.push(p);
    setting = atom.config.get('autocomplete-elixir.elixirPath').replace(/elixir$/, "");
    command = path.join(setting || "", "elixir");
    console.log(setting);
    try {
      ac = new Process({
        command: command,
        args: array.reverse(),
        stderr: stderr,
        exit: exit
      });
    } catch (_error) {
      e = _error;
      stderr(e);
    }
    out = ac.process.stdout;
    return inp = ac.process.stdin;
  };

  exports.getAutocompletion = function(prefix, cb) {
    if (!inp) {
      exports.init(projectPaths);
    }
    if (prefix.trim().length < 1) {
      cb();
      return;
    }
    inp.write("a " + prefix + "\n");
    return waitTillEnd(function(chunk) {
      var multi, one, _, _ref;
      _ref = chunk.split("<>"), _ = _ref[0], one = _ref[1], multi = _ref[2];
      return cb({
        one: one,
        multi: multi.split(";").filter(function(a) {
          return a.trim();
        })
      });
    });
  };

  exports.loadFile = function(path, cb) {
    if (cb == null) {
      cb = (function() {});
    }
    if (!inp) {
      exports.init(projectPaths);
    }
    if (!/.ex$/.test(path)) {
      cb();
      return;
    }
    inp.write("l " + path + "\n");
    return waitTillEnd(function(chunk) {
      console.log("File load " + path + " -> " + chunk);
      if (cb) {
        return cb(chunk);
      }
    });
  };

  waitTillEnd = function(cb) {
    var chunk, fn;
    chunk = "";
    fn = function(data) {
      chunk += data;
      if (~chunk.indexOf("ok.")) {
        out.removeListener("data", fn);
        return cb(chunk.replace("ok.", ""));
      }
    };
    return out.on("data", fn);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLGlGQUFBOztBQUFBLEVBQUEsWUFBQSxHQUFlLGdDQUFmLENBQUE7O0FBQUEsRUFDQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FEUCxDQUFBOztBQUFBLEVBRUEsT0FBQSxHQUFVLElBQUksQ0FBQyxlQUZmLENBQUE7O0FBQUEsRUFJQSxLQUFBLEdBQVEsT0FBQSxDQUFRLGVBQVIsQ0FBd0IsQ0FBQyxLQUpqQyxDQUFBOztBQUFBLEVBS0EsSUFBQSxHQUFPLE9BQUEsQ0FBUSxNQUFSLENBTFAsQ0FBQTs7QUFBQSxFQU1BLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUixDQU5MLENBQUE7O0FBQUEsRUFRQSxHQUFBLEdBQU0sSUFSTixDQUFBOztBQUFBLEVBU0EsR0FBQSxHQUFPLElBVFAsQ0FBQTs7QUFBQSxFQVVBLFlBQUEsR0FBZSxJQVZmLENBQUE7O0FBQUEsRUFZQSxPQUFPLENBQUMsSUFBUixHQUFlLFNBQUMsRUFBRCxHQUFBO0FBQ2IsUUFBQSwrQ0FBQTtBQUFBLElBQUEsWUFBQSxHQUFlLEVBQWYsQ0FBQTtBQUFBLElBQ0EsQ0FBQSxHQUFJLElBQUksQ0FBQyxJQUFMLENBQVUsU0FBVixFQUFxQixZQUFyQixDQURKLENBQUE7QUFBQSxJQUVBLEtBQUEsR0FBUSxZQUZSLENBQUE7QUFBQSxJQUdBLE1BQUEsR0FBUyxTQUFDLENBQUQsR0FBQTthQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBbkIsQ0FBNkIsMENBQUEsR0FBMEMsQ0FBdkUsRUFBUDtJQUFBLENBSFQsQ0FBQTtBQUFBLElBSUEsSUFBQSxHQUFPLFNBQUMsQ0FBRCxHQUFBO0FBQU8sTUFBQSxPQUFPLENBQUMsR0FBUixDQUFhLFNBQUEsR0FBUyxDQUF0QixDQUFBLENBQUE7YUFBNEIsT0FBTyxDQUFDLElB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
//# sourceURL=/home/iraasta/.atom/packages/autocomplete-elixir/lib/alchemide/wrapper.coffee