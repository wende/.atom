(function() {
  var Process, autocomplete, fs, inp, out, path, spawn, waitTillEnd;

  autocomplete = "autocompleter/autocomplete.exs";

  Process = require("atom/buffered-process");

  spawn = require('child_process').spawn;

  path = require('path');

  fs = require('fs');

  out = null;

  inp = null;

  exports.init = function(projectPaths) {
    var ac, array, exit, p, stderr;
    p = path.join(__dirname, autocomplete);
    array = projectPaths;
    stderr = function(e) {
      return console.log("Err: " + e);
    };
    exit = function(e) {
      console.log("CLOSED " + e);
      return exports.init(projectPaths);
    };
    array.push(p);
    ac = new Process({
      command: "elixir",
      args: array.reverse(),
      stderr: stderr,
      exit: exit
    });
    out = ac.process.stdout;
    return inp = ac.process.stdin;
  };

  exports.getAutocompletion = function(prefix, cb) {
    if (prefix.trim().length < 1) {
      cb();
      return;
    }
    inp.write("a " + prefix + "\n");
    return waitTillEnd(function(chunk) {
      var multi, one, _, _ref;
      _ref = chunk.split("<>"), _ = _ref[0], one = _ref[1], multi = _ref[2];
      return cb({
        one: one,
        multi: multi.split(";").filter(function(a) {
          return a.trim();
        })
      });
    });
  };

  exports.loadFile = function(path, cb) {
    if (cb == null) {
      cb = (function() {});
    }
    if (!/.ex$/.test(path)) {
      cb();
      return;
    }
    inp.write("l " + path + "\n");
    return waitTillEnd(function(chunk) {
      console.log("File load " + path + " -> " + chunk);
      if (cb) {
        return cb(chunk);
      }
    });
  };

  waitTillEnd = function(cb) {
    var chunk, fn;
    chunk = "";
    fn = function(data) {
      chunk += data;
      if (~chunk.indexOf("ok.")) {
        out.removeListener("data", fn);
        return cb(chunk.replace("ok.", ""));
      }
    };
    return out.on("data", fn);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDZEQUFBOztBQUFBLEVBQUEsWUFBQSxHQUFlLGdDQUFmLENBQUE7O0FBQUEsRUFDQSxPQUFBLEdBQVUsT0FBQSxDQUFRLHVCQUFSLENBRFYsQ0FBQTs7QUFBQSxFQUdBLEtBQUEsR0FBUSxPQUFBLENBQVEsZUFBUixDQUF3QixDQUFDLEtBSGpDLENBQUE7O0FBQUEsRUFJQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FKUCxDQUFBOztBQUFBLEVBS0EsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBTEwsQ0FBQTs7QUFBQSxFQU9BLEdBQUEsR0FBTSxJQVBOLENBQUE7O0FBQUEsRUFRQSxHQUFBLEdBQU8sSUFSUCxDQUFBOztBQUFBLEVBVUEsT0FBTyxDQUFDLElBQVIsR0FBZSxTQUFDLFlBQUQsR0FBQTtBQUNiLFFBQUEsMEJBQUE7QUFBQSxJQUFBLENBQUEsR0FBSSxJQUFJLENBQUMsSUFBTCxDQUFVLFNBQVYsRUFBcUIsWUFBckIsQ0FBSixDQUFBO0FBQUEsSUFDQSxLQUFBLEdBQVEsWUFEUixDQUFBO0FBQUEsSUFFQSxNQUFBLEdBQVMsU0FBQyxDQUFELEdBQUE7YUFBTyxPQUFPLENBQUMsR0FBUixDQUFhLE9BQUEsR0FBTyxDQUFwQixFQUFQO0lBQUEsQ0FGVCxDQUFBO0FBQUEsSUFHQSxJQUFBLEdBQU8sU0FBQyxDQUFELEdBQUE7QUFBTyxNQUFBLE9BQU8sQ0FBQyxHQUFSLENBQWEsU0FBQSxHQUFTLENBQXRCLENBQUEsQ0FBQTthQUE0QixPQUFPLENBQUMsSUFBUixDQUFhLFlBQWIsRUFBbkM7SUFBQSxDQUhQLENBQUE7QUFBQSxJQUtBLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBWCxDQUxBLENBQUE7QUFBQSxJQU1BLEVBQUEsR0FBUyxJQUFBLE9BQUEsQ0FBUTtB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
//# sourceURL=/home/iraasta/.atom/packages/autocomplete-elixir/lib/alchemide/wrapper.coffee