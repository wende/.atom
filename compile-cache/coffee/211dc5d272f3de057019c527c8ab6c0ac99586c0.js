(function() {
  var IS_ELIXIR, Process, autocomplete, error, extend, fs, inp, lastError, out, path, projectPaths, spawn, waitTillEnd;

  IS_ELIXIR = true;

  extend = require("extend");

  autocomplete = "autocompleter/autocomplete.exs";

  Process = require("atom").BufferedProcess;

  spawn = require('child_process').spawn;

  path = require('path');

  fs = require('fs');

  out = null;

  inp = null;

  projectPaths = null;

  lastError = null;

  error = function(e) {
    return atom.notifications.addError("Woops. Something went bananas \n Error: " + e);
  };

  exports.init = function(pP) {
    var ac, array, command, erlPath, exit, name, options, p, setting, stderr;
    projectPaths = pP;
    p = path.join(__dirname, autocomplete);
    array = projectPaths;
    stderr = function(e) {
      return lastError = e;
    };
    exit = function(e) {
      console.error("CLOSED " + e + ", Last Error: " + lastError);
      return exports.init(projectPaths);
    };
    array.push(p);
    name = IS_ELIXIR ? 'autocomplete-elixir' : 'autocomplete-erlang';
    setting = atom.config.get("" + name + ".elixirPath").replace(/elixir$/, "");
    command = path.join(setting || "", "elixir");
    erlPath = atom.config.get("" + name + ".erlangHome");
    if (!erlPath) {
      atom.notifications.addError('Erlang home configuration setting missing');
      return false;
    }
    options = {
      env: extend({
        ERL_HOME: erlPath,
        ERL_PATH: path.join(erlPath, 'erl')
      }, process.env)
    };
    console.log(setting);
    ac = new Process({
      command: command,
      options: options,
      args: array.reverse(),
      stderr: stderr,
      exit: exit,
      stdout: function() {}
    });
    if (!ac.process) {
      exports.init(pP);
    }
    out = ac.process.stdout;
    return inp = ac.process.stdin;
  };

  exports.getAutocompletion = function(prefix, cb) {
    var cmd;
    if (!inp) {
      exports.init(projectPaths);
    }
    if (prefix.trim().length < 1) {
      cb();
      return;
    }
    cmd = IS_ELIXIR ? "a" : "ea";
    inp.write("" + cmd + " " + prefix + "\n");
    return waitTillEnd(function(chunk) {
      var multi, one, _, _ref;
      _ref = chunk.split("<>"), _ = _ref[0], one = _ref[1], multi = _ref[2];
      return cb({
        one: one,
        multi: multi.split(";").filter(function(a) {
          return a.trim();
        })
      });
    });
  };

  exports.loadFile = function(path, cb) {
    if (cb == null) {
      cb = (function() {});
    }
    if (!inp) {
      exports.init(projectPaths);
    }
    if (!/.ex$/.test(path)) {
      cb();
      return;
    }
    inp.write("l " + path + "\n");
    return waitTillEnd(function(chunk) {
      console.log("File load " + path + " -> " + chunk);
      if (cb) {
        return cb(chunk);
      }
    });
  };

  waitTillEnd = function(cb) {
    var chunk, fn;
    chunk = "";
    fn = function(data) {
      chunk += data;
      if (~chunk.indexOf("ok.")) {
        out.removeListener("data", fn);
        return cb(chunk.replace("ok.", ""));
      }
    };
    return out.on("data", fn);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLGdIQUFBOztBQUFBLEVBQUEsU0FBQSxHQUFZLElBQVosQ0FBQTs7QUFBQSxFQUVBLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUixDQUZULENBQUE7O0FBQUEsRUFHQSxZQUFBLEdBQWUsZ0NBSGYsQ0FBQTs7QUFBQSxFQUlBLE9BQUEsR0FBVSxPQUFBLENBQVEsTUFBUixDQUFlLENBQUMsZUFKMUIsQ0FBQTs7QUFBQSxFQU1BLEtBQUEsR0FBUSxPQUFBLENBQVEsZUFBUixDQUF3QixDQUFDLEtBTmpDLENBQUE7O0FBQUEsRUFPQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FQUCxDQUFBOztBQUFBLEVBUUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBUkwsQ0FBQTs7QUFBQSxFQVdBLEdBQUEsR0FBTSxJQVhOLENBQUE7O0FBQUEsRUFZQSxHQUFBLEdBQU8sSUFaUCxDQUFBOztBQUFBLEVBYUEsWUFBQSxHQUFlLElBYmYsQ0FBQTs7QUFBQSxFQWNBLFNBQUEsR0FBWSxJQWRaLENBQUE7O0FBQUEsRUFnQkEsS0FBQSxHQUFRLFNBQUMsQ0FBRCxHQUFBO1dBQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFuQixDQUE2QiwwQ0FBQSxHQUEwQyxDQUF2RSxFQUFQO0VBQUEsQ0FoQlIsQ0FBQTs7QUFBQSxFQWtCQSxPQUFPLENBQUMsSUFBUixHQUFlLFNBQUMsRUFBRCxHQUFBO0FBQ2IsUUFBQSxvRUFBQTtBQUFBLElBQUEsWUFBQSxHQUFlLEVBQWYsQ0FBQTtBQUFBLElBQ0EsQ0FBQSxHQUFJLElBQUksQ0FBQyxJQUFMLENBQVUsU0FBVixFQUFxQixZQUFyQixDQURKLENBQUE7QUFBQSxJQUVBLEtBQUEsR0FBUSxZQUZSLENBQUE7QUFBQSxJQUdBLE1BQUEsR0FBUyxTQUFDLENB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
//# sourceURL=/home/iraasta/.atom/packages/autocomplete-elixir/lib/alchemide/wrapper.coffee