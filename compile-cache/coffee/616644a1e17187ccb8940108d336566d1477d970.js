(function() {
  var EditorState;

  EditorState = require('./editor-state');

  describe("EditorState", function() {
    var cursorPosition, cursorRange;
    cursorPosition = function(editor, i) {
      var cursor, point;
      cursor = editor.getCursors()[i];
      point = cursor != null ? cursor.getBufferPosition() : void 0;
      return [point != null ? point.row : void 0, point != null ? point.column : void 0];
    };
    cursorRange = function(editor, i) {
      var cursor, head, tail;
      cursor = editor.getCursors()[i];
      if (cursor == null) {
        return null;
      }
      head = cursor.marker.getHeadBufferPosition();
      tail = cursor.marker.getTailBufferPosition();
      return [head != null ? head.row : void 0, head != null ? head.column : void 0, tail != null ? tail.row : void 0, tail != null ? tail.column : void 0];
    };
    beforeEach(function() {
      return waitsForPromise((function(_this) {
        return function() {
          return atom.workspace.open().then(function(editor) {
            return _this.editor = editor;
          });
        };
      })(this));
    });
    describe(".set", function() {
      it("sets the buffer text", function() {
        EditorState.set(this.editor, 'hi');
        return expect(this.editor.getText()).toEqual('hi');
      });
      it("sets cursors where specified", function() {
        EditorState.set(this.editor, '[0]a[2]b[1]');
        expect(this.editor.getText()).toEqual('ab');
        expect(cursorPosition(this.editor, 0)).toEqual([0, 0]);
        expect(cursorPosition(this.editor, 1)).toEqual([0, 2]);
        return expect(cursorPosition(this.editor, 2)).toEqual([0, 1]);
      });
      it("handles missing cursors", function() {
        return expect(((function(_this) {
          return function() {
            return EditorState.set(_this.editor, '[0]x[2]');
          };
        })(this))).toThrow('missing head of cursor 1');
      });
      return it("sets forward & reverse selections if tails are specified", function() {
        EditorState.set(this.editor, 'a(0)b[1]c[0]d(1)e');
        expect(this.editor.getText()).toEqual('abcde');
        expect(cursorRange(this.editor, 0)).toEqual([0, 3, 0, 1]);
        return expect(cursorRange(this.editor, 1)).toEqual([0, 2, 0, 4]);
      });
    });
    return describe(".get", function() {
      it("correctly positions cursors", function() {
        this.editor.setText('abc');
        this.editor.getLastCursor().setBufferPosition([0, 2]);
        this.editor.addCursorAtBufferPosition([0, 1]);
        return expect(EditorState.get(this.editor)).toEqual('a[1]b[0]c');
      });
      return it("correctly positions heads & tails of forward & reverse selections", function() {
        var cursor;
        this.editor.setText('abcde');
        this.editor.getLastCursor().selection.setBufferRange([[0, 1], [0, 3]]);
        cursor = this.editor.addCursorAtBufferPosition([0, 0]);
        cursor.selection.setBufferRange([[0, 2], [0, 4]], {
          reversed: true
        });
        return expect(EditorState.get(this.editor)).toEqual('a(0)b[1]c[0]d(1)e');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvaXJhYXN0YS8uYXRvbS9wYWNrYWdlcy9hdG9taWMtZW1hY3Mvc3BlYy9lZGl0b3Itc3RhdGUtc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEsV0FBQTs7QUFBQSxFQUFBLFdBQUEsR0FBYyxPQUFBLENBQVEsZ0JBQVIsQ0FBZCxDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLGFBQVQsRUFBd0IsU0FBQSxHQUFBO0FBQ3RCLFFBQUEsMkJBQUE7QUFBQSxJQUFBLGNBQUEsR0FBaUIsU0FBQyxNQUFELEVBQVMsQ0FBVCxHQUFBO0FBQ2YsVUFBQSxhQUFBO0FBQUEsTUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFVBQVAsQ0FBQSxDQUFvQixDQUFBLENBQUEsQ0FBN0IsQ0FBQTtBQUFBLE1BQ0EsS0FBQSxvQkFBUSxNQUFNLENBQUUsaUJBQVIsQ0FBQSxVQURSLENBQUE7YUFFQSxpQkFBQyxLQUFLLENBQUUsWUFBUixrQkFBYSxLQUFLLENBQUUsZUFBcEIsRUFIZTtJQUFBLENBQWpCLENBQUE7QUFBQSxJQUtBLFdBQUEsR0FBYyxTQUFDLE1BQUQsRUFBUyxDQUFULEdBQUE7QUFDWixVQUFBLGtCQUFBO0FBQUEsTUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFVBQVAsQ0FBQSxDQUFvQixDQUFBLENBQUEsQ0FBN0IsQ0FBQTtBQUNBLE1BQUEsSUFBZ0IsY0FBaEI7QUFBQSxlQUFPLElBQVAsQ0FBQTtPQURBO0FBQUEsTUFHQSxJQUFBLEdBQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxxQkFBZCxDQUFBLENBSFAsQ0FBQTtBQUFBLE1BSUEsSUFBQSxHQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMscUJBQWQsQ0FBQSxDQUpQLENBQUE7YUFLQSxnQkFBQyxJQUFJLENBQUUsWUFBUCxpQkFBWSxJQUFJLENBQUUsZUFBbEIs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

//# sourceURL=/home/iraasta/.atom/packages/atomic-emacs/spec/editor-state-spec.coffee
