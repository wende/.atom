(function() {
  var DO, DOEND, END, FN, Point, Range, decoration1, decoration2, highlightRange, _ref;

  DO = "do";

  END = "end";

  FN = "fn";

  DOEND = /(do|end|fn)/g;

  _ref = require("atom"), Range = _ref.Range, Point = _ref.Point;

  decoration1 = null;

  decoration2 = null;

  highlightRange = function(editor, r) {
    var marker;
    marker = editor.markBufferRange(r);
    return decoration1 = editor.decorateMarker(marker, {
      type: 'highlight',
      "class": 'selection'
    });
  };

  module.exports.handleMatch = function(editor, e) {
    var bufferPos, counter, fromBeginning, lastLineNo, toEnd, word;
    if (decoration1 != null) {
      decoration1.destroy();
    }
    if (decoration2 != null) {
      decoration2.destroy();
    }
    lastLineNo = editor.buffer.lines.length - 1;
    bufferPos = e.cursor.getBufferPosition().toArray();
    fromBeginning = new Range([0, 0], bufferPos);
    toEnd = new Range(bufferPos, [lastLineNo, 0]);
    highlightRange(editor, e.cursor.getCurrentWordBufferRange());
    word = editor.getWordUnderCursor();
    counter = 0;
    if (word === DO) {
      editor.scanInBufferRange(DOEND, toEnd, function(_arg) {
        var m, r, stop;
        r = _arg.range, m = _arg.matchText, stop = _arg.stop;
        console.log(m);
        if (m === DO || m === FN) {
          counter++;
        }
        if (m === END && counter) {
          counter--;
        } else if (!counter) {
          highlightRange(editor, r);
          stop();
        }
        return console.log(counter);
      });
    }
    if (word === END) {
      return editor.backwardsScanInBufferRange(DOEND, fromBeginning, function(_arg) {
        var m, r, stop;
        r = _arg.range, m = _arg.matchText, stop = _arg.stop;
        if (m === END) {
          counter++;
        }
        if ((m === DO || m === FN) && counter) {
          return counter--;
        } else if (!counter) {
          highlightRange(editor, r);
          return stop();
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvaXJhYXN0YS8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtZWxpeGlyL2xpYi9hbGNoZW1pZGUvZG9lbmRtYXRjaGVyLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxnRkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxJQUFMLENBQUE7O0FBQUEsRUFDQSxHQUFBLEdBQU0sS0FETixDQUFBOztBQUFBLEVBRUEsRUFBQSxHQUFLLElBRkwsQ0FBQTs7QUFBQSxFQUdBLEtBQUEsR0FBUSxjQUhSLENBQUE7O0FBQUEsRUFJQSxPQUFpQixPQUFBLENBQVEsTUFBUixDQUFqQixFQUFDLGFBQUEsS0FBRCxFQUFRLGFBQUEsS0FKUixDQUFBOztBQUFBLEVBS0EsV0FBQSxHQUFjLElBTGQsQ0FBQTs7QUFBQSxFQU1BLFdBQUEsR0FBYyxJQU5kLENBQUE7O0FBQUEsRUFRQSxjQUFBLEdBQWlCLFNBQUMsTUFBRCxFQUFTLENBQVQsR0FBQTtBQUNmLFFBQUEsTUFBQTtBQUFBLElBQUEsTUFBQSxHQUFTLE1BQU0sQ0FBQyxlQUFQLENBQXVCLENBQXZCLENBQVQsQ0FBQTtXQUNBLFdBQUEsR0FBYyxNQUFNLENBQUMsY0FBUCxDQUFzQixNQUF0QixFQUE4QjtBQUFBLE1BQUMsSUFBQSxFQUFNLFdBQVA7QUFBQSxNQUFvQixPQUFBLEVBQU8sV0FBM0I7S0FBOUIsRUFGQztFQUFBLENBUmpCLENBQUE7O0FBQUEsRUFZQSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQWYsR0FBNkIsU0FBQyxNQUFELEVBQVMsQ0FBVCxHQUFBO0FBQzNCLFFBQUEsMERBQUE7O01BQUEsV0FBVyxDQUFFLE9BQWIsQ0FBQTtLQUFBOztNQUNBLFdBQVcsQ0FBRSxPQUFiLENBQUE7S0FEQTtBQUFBLElBR0EsVUFBQSxHQUFhLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQXBCLEdBQTZCLENBSDFDLENBQUE7QUFBQSxJQUlBLFNBQUEsR0FBWSxDQUFDLENBQUMsTUFBTSxDQUFDLGlCQUFULENBQUEsQ0FBNEIsQ0FBQyxPQUE3QixDQUFBLENBSlosQ0FBQTtBQUFBLElBS0EsYUFBQSxHQUFvQixJQUFBLEtBQUEsQ0FBTSxDQUFDLENBQUQsRUFBRyxDQUFILENBQU4sRUFBYSxTQUFiLENBTHBCLENBQUE7QUFBQSxJQU1BLEtBQUEsR0FBb0IsSUFBQSxLQUFBLENBQU0sU0FBTixFQUFpQixDQUFDLFVBQUQsRUFBYSxDQUFiLENBQWpCLENBTnBCLENBQUE7QUFBQSxJQU9BLGNBQUEsQ0FBZSxNQUFmLEVBQXVCLENBQUMsQ0FBQyxNQUFNLENBQUMseUJBQVQsQ0FBQSxDQUF2QixDQVBBLENBQUE7QUFBQSxJQVNBLElBQUEsR0FBTyxNQUFNLENBQUMsa0JBQVAsQ0FBQSxDQVRQLENBQUE7QUFBQSxJQVVBLE9BQUEsR0FBVSxDQVZWLENBQUE7QUFXQSxJQUFBLElBQUcsSUFBQSxLQUFRLEVBQVg7QUFDRSxNQUFBLE1BQU0sQ0FBQyxpQkFBUCxDQUF5QixLQUF6QixFQUFnQyxLQUFoQyxFQUF1QyxTQUFDLElBQUQsR0FBQTtBQUNyQyxZQUFBLFVBQUE7QUFBQSxRQUQ4QyxTQUFQLE9BQXFCLFNBQVgsV0FBYyxZQUFBLElBQy9ELENBQUE7QUFBQSxRQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBWixDQUFBLENBQUE7QUFDQSxRQUFBLElBQUcsQ0FBQSxLQUFLLEVBQUwsSUFBVyxDQUFBLEtBQUssRUFBbkI7QUFBMkIsVUFBQSxPQUFBLEVBQUEsQ0FBM0I7U0FEQTtBQUVBLFFBQUEsSUFBRyxDQUFBLEtBQUssR0FBTCxJQUFhLE9BQWhCO0FBQTZCLFVBQUEsT0FBQSxFQUFBLENBQTdCO1NBQUEsTUFDSyxJQUFHLENBQUEsT0FBSDtBQUNILFVBQUEsY0FBQSxDQUFlLE1BQWYsRUFBdUIsQ0FBdkIsQ0FBQSxDQUFBO0FBQUEsVUFDQSxJQUFBLENBQUEsQ0FEQSxDQURHO1NBSEw7ZUFNQSxPQUFPLENBQUMsR0FBUixDQUFZLE9BQVosRUFQcUM7TUFBQSxDQUF2QyxDQUFBLENBREY7S0FYQTtBQW9CQSxJQUFBLElBQUcsSUFBQSxLQUFRLEdBQVg7YUFDRSxNQUFNLENBQUMsMEJBQVAsQ0FBa0MsS0FBbEMsRUFBeUMsYUFBekMsRUFBd0QsU0FBQyxJQUFELEdBQUE7QUFDdEQsWUFBQSxVQUFBO0FBQUEsUUFEK0QsU0FBUCxPQUFxQixTQUFYLFdBQWMsWUFBQSxJQUNoRixDQUFBO0FBQUEsUUFBQSxJQUFHLENBQUEsS0FBSyxHQUFSO0FBQWlCLFVBQUEsT0FBQSxFQUFBLENBQWpCO1NBQUE7QUFDQSxRQUFBLElBQUcsQ0FBQyxDQUFBLEtBQUssRUFBTCxJQUFXLENBQUEsS0FBSyxFQUFqQixDQUFBLElBQXdCLE9BQTNCO2lCQUF3QyxPQUFBLEdBQXhDO1NBQUEsTUFDSyxJQUFHLENBQUEsT0FBSDtBQUNILFVBQUEsY0FBQSxDQUFlLE1BQWYsRUFBdUIsQ0FBdkIsQ0FBQSxDQUFBO2lCQUNBLElBQUEsQ0FBQSxFQUZHO1NBSGlEO01BQUEsQ0FBeEQsRUFERjtLQXJCMkI7RUFBQSxDQVo3QixDQUFBO0FBQUEiCn0=

//# sourceURL=/home/iraasta/.atom/packages/autocomplete-elixir/lib/alchemide/doendmatcher.coffee
